#!/bin/bash
#
# Showtime configure shared functions
#
# Copyright (c) 2005-2008 Andreas Ã–man
#
# Based on FFmpeg's configure script:
#
# Copyright (c) 2000-2002 Fabrice Bellard
# Copyright (c) 2005-2008 Diego Biurrun
# Copyright (c) 2005-2008 Mans Rullgard
#

TOPDIR=`pwd`
BUILD=${CONFIGURE_POSTFIX}
TMPDIR=${TOPDIR}/tmp
GLW_DEFAULT_THEME="mono"
DEFAULT_LOGTARGET=""
JARGS=""

CONFIG_LIST="
 libasound
 libpulse
 libfreetype
 libpthread
 zlib
 posix_networking
 dvd
 dvd_linux
 dvd_wii
 cdda
 cddb
 glw
 glw_frontend_x11
 glw_frontend_wii
 glw_frontend_ps3
 glw_frontend_cocoa
 glw_backend_opengl
 glw_backend_gx
 glw_backend_rsx
 glw_backend_opengl_es
 gu
 libogc
 spotify
 libspotify_load_runtime
 lirc
 stdin
 release
 embedded_resources
 coreaudio
 avahi
 appleremote
 bonjour
 nvctrl
 libopenspc
 libgme
 libxss
 libxv
 serdev
 openssl
 polarssl
 librtmp
 libx11
 libxext
 locatedb
 spotlight
 vdpau
 spidermonkey
 libxxf86vm
 libxrandr
 libsidplay2
 httpserver
 psl1ght
 timegm
 inotify
 realpath
 trex
 emu_thread_specifics
 ps3_vdec
 font_liberation
 libfontconfig
 binreplace
 readahead_cache
 sqlite_vfs
 sqlite_locking
 libav
"

cleanup() {
    rm -rf $TMPDIR
}

die() {
    cleanup
    echo "Configure failed"
    exit 1
}

die_invalid_opt() {
    echo "Invalid option: $1"
    die
}

set_all(){
    value=$1
    shift
    for var in $*; do
        eval $var=$value
    done
}

enable(){
    set_all yes $*
}

disable(){
    set_all no $*
}


enabled(){
    eval test "x${!1}" = "xyes"
}

disabled(){
    eval test "x${!1}" = "xno" -o "x${!1}" = "x"
}

toupper(){
    echo "$@" | tr abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ
}

is_in(){
    value=$1
    shift
    for var in $*; do
        [ $var = $value ] && return 0
    done
    return 1
}

print_config(){
    pfx=$1
    header=$2
    makefile=$3
    shift 3
    for cfg; do
        ucname="`toupper $cfg`"
        if enabled $cfg; then
            echo "#define ${pfx}${ucname} 1" >> $header
            echo "#define ENABLE_${ucname} 1" >> $header
            echo "${pfx}${ucname}=yes" >> $makefile
        else
            echo "#define ENABLE_${ucname} 0" >> $header
        fi
    done
}

cp_if_changed(){
    cmp -s "$1" "$2" || cp -f "$1" "$2"
}

common_help(){
  echo "Usage: configure [options]"
  echo "Options: [defaults in brackets after descriptions]"
  echo
  echo "Standard options:"
  echo "  --help                   Print this message"
  echo "  --with-libav=PREFIX      Path to where libav is installed."
  echo "                           By default Showtime will build libav itself."
  echo "  --build=BUILD            Build in build.BUILD [build.$BUILD]"
  echo "  --jobs=N                 Allow N jobs at once"
  echo "  --release                Stage for release"
  echo ""
  echo "Platform specific options:"
}




common_opt(){
  case "$1" in

  --with-libav=*) LIBAV_PATH="$2"
  ;;

  --build=*) BUILD="$2"
  ;;

  --enable-?*|--disable-?*)
  eval $(echo "$1" | sed 's/--/action=/;s/-/ option=/;s/-/_/g')
  if is_in $option $CONFIG_LIST; then
      $action $option
  else
      die_invalid_opt $1
  fi
  ;;

  --jobs=*) JARGS="-j$2"
  ;;
  --release) enable release
  ;;
  *)
  die_invalid_opt $1
  esac
}


setup_env(){
    BUILDDIR=build.${BUILD}

    mkdir -p ${BUILDDIR}
    BUILDDIR=`cd ${BUILDDIR} && pwd`

    CONFIG_H=${BUILDDIR}/config.h.tmp
    CONFIG_MAK=${BUILDDIR}/config.mak.tmp
    CONFIG_DEF=${TOPDIR}/config.default

    mkdir -p ${BUILDDIR}
    
    # Create a tmpdir used during configure
    mkdir -p ${TMPDIR}
    TMPDIR=`cd ${TMPDIR} && pwd`
    
    # Create config.mak
    cat > ${CONFIG_MAK} << EOF 
# Automatically generated by configure, do not edit
CONFIGURE_ARGS=$@
TOPDIR=$TOPDIR
PLATFORM=$PLATFORM
CONFIGURE_POSTFIX=$CONFIGURE_POSTFIX
EOF
   
    # Create config.h
    cat > ${CONFIG_H} << EOF 
/* Automatically generated by configure, do not edit */
#define CONFIGURE_ARGS "$@"
#define SHOWTIME_DEFAULT_UI "${DEFAULT_UI}"
#define SHOWTIME_DEFAULT_LOGTARGET "${DEFAULT_LOGTARGET}"
EOF

    # Create config.default
    cat > ${CONFIG_DEF} << EOF 
# Automatically generated by configure, do not edit
BUILD ?= $BUILD
EOF

    enable libav

}


spotify_setup() {
    enable spotify
    echo >${BUILDDIR}/spotify_app_key.h "static const uint8_t appkey[] = {"
    od <"$1" -v -An -b | awk '{for(i = 1; i <= NF; i++) print "0"  $i  ","}' >>${BUILDDIR}/spotify_app_key.h
    echo >>${BUILDDIR}/spotify_app_key.h "};"
}


libav_setup() {
    if disabled libav; then
	return
    fi

    if [ "x${LIBAV_PATH}" != "x" ]; then
	return
    fi

    echo "Updating libav... (if needed)"
    git submodule update --init ext/libav
    echo "Configuring libav..."

    LIBAV_BUILD_DIR=${BUILDDIR}/libav/build
    LIBAV_INSTALL_DIR=${BUILDDIR}/libav/install
    mkdir -p ${LIBAV_BUILD_DIR}
    mkdir -p ${LIBAV_INSTALL_DIR}

    LIBAV_COMMON_FLAGS="--disable-encoders --disable-bsfs --disable-filters --disable-muxers --disable-devices --disable-protocols --disable-network --disable-shared --enable-static --disable-ffserver --disable-ffmpeg --disable-ffprobe --disable-bzlib --disable-decoder=twinvq --disable-decoder=snow --disable-decoder=cavs --enable-encoder=png"

    (cd ${LIBAV_BUILD_DIR} && ${TOPDIR}/ext/libav/configure ${LIBAV_ARCH_FLAGS} ${LIBAV_COMMON_FLAGS} --prefix=${LIBAV_INSTALL_DIR} --extra-cflags="${LIBAV_CFLAGS}" --extra-ldflags="${LIBAV_LDFLAGS}") || die

    (cd ${LIBAV_BUILD_DIR} && make ${JARGS}) || die
    (cd ${LIBAV_BUILD_DIR} && make ${JARGS} install) || die
    LIBAV_PATH=${LIBAV_INSTALL_DIR}
}

#
# Do final common stuff
#
finalize() {

    if enabled libav; then
	echo >>${CONFIG_MAK} "CFLAGS_cfg += -I${LIBAV_PATH}/include"
	echo >>${CONFIG_MAK} "LDFLAGS_cfg += -L${LIBAV_PATH}/lib -lswscale -lavformat -lavcodec -lavutil"
    fi

    if enabled polarssl; then
	echo "Using built-in polarssl"
	echo >>${CONFIG_MAK} "CFLAGS_cfg += -DUSE_POLARSSL"
    fi


    if [ "x${SPOTIFY_KEYFILE}" != "x" ]; then
	spotify_setup "${SPOTIFY_KEYFILE}"
    fi

    # Generate default theme path for GLW
    # Optionally embed the theme if in release mode
    if enabled glw; then
	if enabled embedded_resources; then
	    GLW_DEFAULT_THEME_URL="bundle://glwthemes/${GLW_DEFAULT_THEME}"
	    echo >>${CONFIG_MAK} "BUNDLES+=glwthemes/${GLW_DEFAULT_THEME}"
	else
	    GLW_DEFAULT_THEME_URL="file://`cd glwthemes/$GLW_DEFAULT_THEME && pwd`"
	fi
	echo >>${CONFIG_H} "#define SHOWTIME_GLW_DEFAULT_THEME_URL \""${GLW_DEFAULT_THEME_URL}"\""
    fi

    # Generate resource path for GU
    # Optionally embed the stuff if in release mode
    if enabled gu; then
	if enabled embedded_resources; then
	    GU_RESOURCES_URL="bundle://guresources"
	    echo >>${CONFIG_MAK} "BUNDLES+=guresources"
	else
	    GU_RESOURCES_URL="file://`cd guresources && pwd`"
	fi
	echo >>${CONFIG_H} "#define SHOWTIME_GU_RESOURCES_URL \""${GU_RESOURCES_URL}"\""
    fi

    # Fonts
    # Optionally embed the stuff if in release mode
    if enabled font_liberation; then
	if enabled embedded_resources; then
	    LIBERATION_RESOURCE_URL="bundle://resources/fonts/liberation"
	    echo >>${CONFIG_MAK} "BUNDLES+=resources/fonts/liberation"
	else
	    LIBERATION_RESOURCE_URL="file://`cd resources/fonts/liberation && pwd`"
	fi
	echo >>${CONFIG_H} "#define SHOWTIME_FONT_LIBERATION_URL \""${LIBERATION_RESOURCE_URL}"\""
    fi

    # Languages
    if enabled embedded_resources; then
	LANGUAGES_URL="bundle://lang"
	echo >>${CONFIG_MAK} "BUNDLES+=lang"
    else
	LANGUAGES_URL="file://`cd lang && pwd`"
    fi
    echo >>${CONFIG_H} "#define SHOWTIME_LANGUAGES_URL \""${LANGUAGES_URL}"\""

    # sqlite
    if enabled sqlite_vfs; then
	echo >>${CONFIG_MAK} "SQLITE_CFLAGS_cfg += -DSQLITE_OS_OTHER=1 -DSQLITE_DEFAULT_LOCKING_MODE=1"
    fi

    if enabled sqlite_locking; then
	echo >>${CONFIG_MAK} "SQLITE_CFLAGS_cfg += -DSQLITE_MUTEX_NOOP"
    fi

    # Release tag
    if enabled release; then
	echo >>${CONFIG_MAK} "CFLAGS_dbg = -DNDEBUG -D_NDEBUG"
    else
	echo >>${CONFIG_MAK} "CFLAGS_dbg = -DJS_GC_ZEAL -DDEBUG=1"
    fi

    cat >> ${CONFIG_MAK} << EOF 
OSENV=${OSENV}
LDFLAGS_cfg += -lz -lm
EOF
  
    # PROG not set, set to default binary path
    if [ "x${PROG}" == "x" ]; then
        PROG="build.${BUILD}/showtime"
    fi
    echo >>${CONFIG_MAK} "PROG=${PROG}"

    # Generate config files
    print_config CONFIG_ ${CONFIG_H} ${CONFIG_MAK} $CONFIG_LIST

    cp_if_changed ${CONFIG_H} ${BUILDDIR}/config.h
    cp_if_changed ${CONFIG_MAK} ${BUILDDIR}/config.mak
    rm -f ${CONFIG_H} ${CONFIG_MAK}

    echo "Final binary is: ${PROG}"
    cleanup
    exit 0
}
