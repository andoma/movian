#import "theme://include/defs.view"
#import "theme://include/separators.view"
#import "theme://include/buttons.view"
#import "theme://include/slider.view"

settingBool(_("Top bar navigation buttons"), "navtools", true, $ui.topBarTools);

settingBool(_("Adjust background tint based on daytime"), "daytimegradient", 
	    true, $ui.dayTimeGradient);

settingBool(_("Fancy UI animations"), "fancyAnimations", true, $ui.fancyAnimations);

settingBool(_("Alternate list layout"), "list2", false, $ui.list2);

settingBool(_("Multilingual 'No media loaded'"), "nmlmode", true, $ui.nmlmode);

onEvent(menu, {
  $ui.menu = !$ui.menu;
});

onEvent(logwindow, {
  $ui.logwindow = !$ui.logwindow;
});

onEvent(sysinfo, {
  $ui.showSysteminfo = !$ui.showSysteminfo;
});

onEvent(back, {
  $ui.menu = false;
}, $ui.menu);

onEvent(back, {
  $ui.logwindow = false;
}, $ui.logwindow);


#define TOOLBARCOL() {[0.5, 0.5, 0.5]}

$ui.fullwindow = 0;

widget(container_z, {

  widget(gradient, {
    .color1 = [0, 0, 0] * iir(1 - ($ui.fullwindow || $ui.screensaverActive), 16);
    .color2 = [0.15, 0.13, 0.13] * iir(1 - ($ui.fullwindow || $ui.screensaverActive), 16);
  });
  
  widget(container_y, {
    space(1);
    widget(throbber3d, {
      .alpha = iir($global.nav.currentpage.model.loading, 4);
    });
    space(1);
  });

  widget(loader, {
    .time = 0.3;
    .effect = blend;
    .source = select($ui.screensaverActive, "theme://screensaver.view", "");
  });


  widget(underscan, {
    widget(container_z, {
      widget(layer, {
	.alpha = iir(1 - $ui.screensaverActive, 8);

	#include "theme://maindeck.view"

	// Command menu

	#include "theme://commandmenu/cmd_root.view"

	// Popup cloner

	cloner($global.popups, loader, {
	  .source = "theme://popups/" + $self.type + ".view";
	});

	// Log window

	widget(backdrop, {
	  .hidden = !$ui.logwindow;

	  PLATE_GFX();
	  .color = [0.1, 0.1, 0.1];
	  .alphaSelf = 0.8;
	  
	  widget(container_y, {

	    widget(label, {
	      .caption = "Log";
	      .sizeScale = 1.5;
	      .align = center;
	    });
	    HORIZONTAL_SEPARATOR();

	    widget(container_x, {
	      widget(list_y, {
		.id = "list";
		cloner($global.logbuffer, label, {
		  .sizeScale = 0.75;
		  .caption = $self.prefix + $self.message;
		  .ellipsize = true;
		  .color = translate($self.severity, [1,1,1],
				     "DEBUG", [0.5, 1, 0.5],
				     "INFO",  [1, 1, 0.5],
				     "ERROR", [1, 0.5, 0.5]);

		  
		});
	      });
	      LIST_Y_SLIDER("list", true);
	    });
	  });
	});
      });
      // Now playing info
      widget(container_y, {
	.align = bottom;
	widget(expander_y, {

	  $ui.playdeckheight = getHeight();
	  .expansion = scurve($ui.showplaydeck && $global.media.current.type, 0.3);
	  widget(loader, {
	    .time = 0.3;
	    .effect = blend;
	    .noInitialTransform = true;
	    .source = "theme://playdecks/" + $global.media.current.type + ".view";
	  });
	});
      });
    });
  });

  // Overlay that always should be visible even if screen saver is active

  widget(container_y, {
    .padding = 30;
    .align = top;
    cloner($global.notifications.nodes, container_x, {
      widget(backdrop, {
	.source = "theme://graphics/blackdrop.png";
	.border = 12;
	.padding = [4,-4];
	.alphaSelf = 0.8;

	widget(container_x, {
	  .spacing = 10;
	  widget(icon, {
	    .sizeScale = 1.5;
	    .source = "theme://svg/Alert.svg";
	    .color = translate($self.type, [1,1,1],
			       "info", [0.5, 1, 0.5],
			       "warning",  [1, 1, 0.5],
			       "error", [1, 0.5, 0.5]);
	  });

	  widget(label, {
	    .caption = $self.text;
	    .sizeScale = 1.5;
	    .color = translate($self.type, [1,1,1],
			       "info", [0.5, 1, 0.5],
			       "warning",  [1, 1, 0.5],
			       "error", [1, 0.5, 0.5]);
	  });
	});
      });
      space(1);
    });
  });

  widget(container_x, {
    space(1);
    widget(container_y, {
      .align = center;
      .filterConstraintX = true;

      widget(backdrop, {
	PLATE_GFX();
	.alpha = iir(changed($global.audio.mastervolume, 2, true), 7);
	.color = PLATE_COLOR_AUDIO();
	
	widget(label, {
	  .caption = fmt(_("Master volume: %d dB"), $global.audio.mastervolume);
	  .align = center;
	});
      });
      
      widget(backdrop, {
	PLATE_GFX();
	.alpha = iir($global.audio.mastermute, 7);
	.color = PLATE_COLOR_OFF();
	
        widget(label, {
	  .caption = _("Audio muted");
	  .align = center;
	});
      });
    });
    space(1);
  });
});

