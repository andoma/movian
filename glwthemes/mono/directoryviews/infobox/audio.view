#import "theme://include/defs.view"
#import "theme://include/separators.view"
#import "theme://include/infobox.view"

widget(container_y, {
  .spacing = 5;
  widget(container_x, {
    widget(label, {
      .caption = $args.metadata.title;
      .ellipsize = true;
      .sizeScale = 1.5;
      .filterConstraintX = true;
    });
    widget(label, {
      .align = right;

      .autohide = true;
      .caption = value2duration($args.metadata.duration);
      .sizeScale = 1.5;
    });
  });

  skinInfoboxFocusable(
    isLink($args.metadata.artist),
    navOpen($args.metadata.artist),
    widget(label, {
      .color = select(isFocused(), 1.0, 0.6);
      .caption = $args.metadata.artist;
      .ellipsize = true;
    });
  );
  
  cloner($args.metadata.additional_artists, container_z, {
    skinInfoboxFocusable(
      true,
      navOpen($self.artist),
      widget(label, {
	.color = select(isFocused(), 1.0, 0.6);
	.caption = $self.artist;
	.ellipsize = true;
      });
    );
  });

  HORIZONTAL_SEPARATOR();

  widget(container_x, {
    .spacing = 5;
    widget(container_y, {
      .align = top;
      skinInfoboxFocusable(
	isLink($args.metadata.album),
	navOpen($args.metadata.album),
	widget(label, {
	  .color = select(isFocused(), 1.0, 0.6);
	  .caption = $args.metadata.album;
	  .ellipsize = true;
	});
      );
    });
    widget(image, {
      .hidden = select($args.metadata.album_art, false, true);
      .align = topLeft;
      .width = $ui.size * 6;
      .height = $ui.size * 6;
      .source = $args.metadata.album_art;
    });
  });

  HORIZONTAL_SEPARATOR();

  widget(label, {
    .color = 0.6;
    .hidden = select($args.metadata.user.name, false, true);
    .caption = fmt(_("Added by: %s"), $args.metadata.user.name);
  });

  widget(label, {
    .color = 0.6;
    .caption = fmt(_pl("Played %d times", "Played %d time", $args.playcount), $args.playcount);
  });

  space(1);
  widget(container_x, {
    .spacing = 10;
    .homogenous = true;
    skinInfoboxEnqueue(true, enqueuetrack($args));
    skinInfoboxDelete($self.model.canDelete, {
      delete($args);
    });
  });
});
