#import "skin://common.view"

#define AUTOFADE() {
//  .alpha = 0.3 + scurve(clamp(isFocused() + $view.change, 0, 1), 0.1, 10);
//  .blur = 1 - scurve(select(isFocused(), 1, $view.change), 0.1, 10);
}


#define DIVIDER(TITLE, HIDDEN) {
  widget(container_y, {
    .padding = [20, 0];
    hidden: HIDDEN;
    AUTOFADE();
     widget(label, {
      .caption = TITLE;
      .sizeScale = 1.5;
      .outline = true;
      .shadow = true;
    });
    VerticalSeparator();
  });
}



#define ITEM(ICON, TITLE, URL) {

  widget(container_x, {
    onEvent(activate, navOpen(URL));

    .padding = [40, 0];
    .focusable = true;
    .spacing = 40;
    AUTOFADE();
    
    widget(image, {
      .width = $ui.size * 6;
      .height = $ui.size * (2 + isFocused() * 4);
      .source = ICON;
      .shadow = true;
    });
    
    widget(container_y, {
      .align = center;
      widget(label, {
	.filterConstraintX = true;
	.caption = TITLE;
	.sizeScale = 1.5 + 2 * isFocused();
	.bold = isFocused();
	.outline = true;
	.shadow = true;
	.alpha = iir(isFocused(), 5) + 0.4;
      });
/*
      widget(label, {
	.padding = [40, 0];
	.filterConstraintX = true;
	.caption = "bla bla bla 0 123 foo bar";
	.bold = isFocused();
	.outline = true;
	.shadow = true;
	.alpha = iir(isFocused(), 5) + 0.4;
	.sizeScale = 1 + isFocused();
      });
*/
    });
  });
}


#define TYPED_ITEM(ICON, TYPE, TITLE, URL) {
  ITEM(ICON ?? "dataroot://resources/svg/" + 
       translate(TYPE, "Folder",
		 "music",    "Music",
		 "video",    "Movie",
		 "tv",       "Display",
		 "usb",      "Usb",
		 "dvd",      "Disc",
		 "cd",       "Disc",
		 "bluray",   "Disc",
		 "photos",   "Pictures") + ".svg",
       TITLE,
       URL);
}

widget(container_x, {
  alpha: 1 - iir(clamp(getLayer(), 0, 1), 7) * 0.5;
  blur:      iir(clamp(getLayer(), 0, 1), 7);

  widget(clist, {
    .filterConstraintX = true;
    .center = 0.2;
    .spacing = $ui.size / 2;

    $view.focused = focusedChild();

    $view.change = changed($view.focused, 1);

    // News

    cloner($global.news, container_x, {
      spacing: $ui.size;
      padding: [$ui.size*2, 0];

      widget(icon, {
	source: "dataroot://resources/svg/Alert.svg";
	shadow: true;
	sizeScale: 1;
      });

      widget(label, {
	caption: $self.message;
	outline: true;
	shadow: true;
      });

      space(1);

      widget(backdrop, {
	onEvent(activate, navOpen($self.location));
	focusable: 0.1;
	alpha: isFocused() + 0.5;
	source: "skin://graphics/border-tiny.png";
	border: 4;
	margin: [0,-3];
	padding: [10, -1];
	widget(label, {
	  outline: true;
	  shadow: true;
	  caption: $self.caption;
	});
      });

      widget(backdrop, {
	onEvent(activate, deliverEvent($self.eventSink, "dismiss"));
	focusable: 0.1;
	alpha: isFocused() + 0.5;
	source: "skin://graphics/border-tiny.png";
	border: 4;
	margin: [0,-3];
	padding: [10, -1];
	widget(label, {
	  outline: true;
	  shadow: true;
	  caption: _("Dismiss");
	});
      });
    });




    // Search

    widget(container_x, {
      .padding = [40, 0];
      .spacing = 40;
      AUTOFADE();

      widget(image, {
	.width = $ui.size * 4;
	.source = "dataroot://resources/svg/Search.svg";;
	.shadow = true;
      });

      widget(container_y, {
	.align = center;
	widget(backdrop, {
	  .height = $ui.size * 2;
	  .filterConstraintX = true;
	  .color = [0.45, 0.45, 0.5];
	  .source = "skin://graphics/shadedplate.png";
	  .border =  [4, 4, 4, 4];
	  .padding = [0, -2, -2, -2];
	  
          widget(backdrop, {
            .filterConstraintX = true;
            .color = [0.0, 0.0, 0.0];
            .source = "skin://graphics/shadedplate.png";
            .border =  [4, 4, 4, 4];
            .padding = [0, -2, 0, -2];
	    
            widget(text, {
	      .focusable = true;
              bind($view.searchQuery);
	      .sizeScale = 1.5;
	      onEvent(enter, navOpen("search:" + $view.searchQuery),
		      $view.searchQuery);
	      onEvent(submit, navOpen("search:" + $view.searchQuery),
		      $view.searchQuery);
	      description: _("Search / Open URL");
            });
	  });
	});
      });
    });


    $view.video  = propSorter($global.services.all,
			      sort,   "node.title", false, false,
			      filter, "node.type", neq, "video", exclude);

    $view.music  = propSorter($global.services.all,
			      sort,   "node.title", false, false,
			      filter, "node.type", neq, "music", exclude);

    $view.tv     = propSorter($global.services.all,
			      sort,   "node.title", false, false,
			      filter, "node.type", neq, "tv", exclude);

    $view.photos = propSorter($global.services.all,
			      sort,   "node.title", false, false,
			      filter, "node.type", neq, "photos", exclude);

    $view.other  = propSorter($global.services.all,
			      sort,   "node.title", false, false,
			      filter, "node.type", neq, "other", exclude);
    


    DIVIDER("Video", !count($view.video) );
    
    cloner($view.video, container_z, {
      TYPED_ITEM($self.icon, $self.type, $self.title, $self.url);
    });
    
    DIVIDER("Audio", !count($view.music));

    cloner($view.music, container_z, {
      TYPED_ITEM($self.icon, $self.type, $self.title, $self.url);
    });


    DIVIDER("TV", !count($view.tv));

    cloner($view.tv, container_z, {
      TYPED_ITEM($self.icon, $self.type, $self.title, $self.url);
    });

    DIVIDER("Photos", !count($view.photos));

    cloner($view.photos, container_z, {
      TYPED_ITEM($self.icon, $self.type, $self.title, $self.url);
    });

    DIVIDER("Other", !count($view.other));

    cloner($view.other, container_z, {
      TYPED_ITEM($self.icon, $self.type, $self.title, $self.url);
    });

    DIVIDER("System", false);

    ITEM("dataroot://resources/svg/Settings.svg", _("Settings"), "settings:");
    ITEM("dataroot://resources/svg/Info.svg", _("About Showtime"), "page:about");
    ITEM("dataroot://resources/svg/Plugin.svg", _("Plugins"), "plugin:start");


  });
});
