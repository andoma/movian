#import "skin://common.view"


widget(container_y, {
  alpha: 1 - iir(clamp(getLayer(), 0, 1), 7) * 0.5;
  blur:      iir(clamp(getLayer(), 0, 1), 7);

  PageTitle($page.model.metadata.title);
  VerticalSeparator();

widget(keyintercept, {

  widget(container_x, {

    filterConstraintY: true;
    padding: [5, 5, 5, $ui.playdeckheight];
    spacing: 10;

    // ------ The list --------------------------------------

      widget(container_x, {
	filterConstraintX: true;
	spacing: 5;
	widget(list_y, {
	  id: "list";
	  &clone.focused = focusedChild();
	  spacing: 3;

	  cloner($page.model.nodes, loader, {
	    time: 0.1;
	    effect: blend;
	    alt: "listitems/default.view";
	    source: "listitems/" + $self.type + ".view";
	  });


	  widget(loader, {
	    hidden: !$page.model.mayadd;
	    noInitialTransform: true;
	    source: select($page.model.mayadd, "listitems/add.view", "");
	  });
	});
	widget(slider_y, {
	  bind("list");
	  width: 4;
	  focusable: canScroll();
	  navFocusable: true;
	  alpha: iir(canScroll(), 16);
	  
	  widget(quad, {
	    alpha: iir(0.3 + 0.3 * (isFocused() || isPressed()), 4) + isHovered();
	  });
	});
    });

    widget(expander_x, {

      expansion: scurve($view.showRightPane, 0.3);
      alpha    : scurve($view.showRightPane, 0.3);


      widget(loader, {
	width: $ui.width / 2;
	time: 0.1;
	effect: blend;
	source: translate($clone.focused.type, "",
			  "video", "iteminfo/video.view",
			  "image", "iteminfo/image.view",
			  "tvchannel", "iteminfo/tvchannel.view",
			  "font", "iteminfo/font.view",
			  "plugin", "iteminfo/plugin.view");
	  .args ?= $clone.focused;
      });

      $view.showRightPane = translate($clone.focused.type, 0,
				      "video", 1,
				      "plugin", 1,
				      "tvchannel", 1,
				      "font", 1,
				      "image", 1
				     );
      });
    });
  });
});
