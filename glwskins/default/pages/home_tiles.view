#import "skin://common.view"

$view.sizer = $ui.size / 2;

#define HOMEITEM(CAPTION, ICON, ACTION, BADGE, WEIGHT=1) {
  widget(container_y, {
    align: center;
    spacing: $ui.size / 2;
    focusable: WEIGHT;
    onEvent(activate, ACTION);
    
    widget(displacement, {

      padding: $view.sizer * -1.5 * iir(isHovered() || isFocused(), 3) + $view.sizer * iir(isPressed(), 3);

      widget(container_z, {
      
	widget(backdrop, {

	  color: iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
	  SquareButtonBack();
	  
	  widget(frontdrop, {
	    SquareButtonFront();
	  
	    widget(image, {
	      color: iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
	      source: ICON;
	      shadow: true;
	    });
	  });
	});
	widget(container_x, {
	  alpha: iir(select(BADGE, 1, 0), 8);
	  space(1);
	  widget(container_y, {
	    space(1);
	    widget(backdrop, {
	      source: "skin://graphics/badge.png";
	      border: 16;
	      padding: [-4, -12];
	      widget(label, {
		outline: true;
		shadow: true;
		caption: BADGE;
		size: 24;
	      });
	    });
	  });
	});
      });
    });
    
    widget(label, {
      caption: CAPTION;
      outline: true;
      shadow: true;
      align: center;
      color: iir(0.5 + (isFocused() || isPressed() || isHovered()), 4);
    });
  });
}

widget(container_y, {

  alpha: 1 - iir(clamp(getLayer(), 0, 1), 7) * 0.5;
  blur:      iir(clamp(getLayer(), 0, 1), 7);


  padding: $ui.size / 2;

  cloner($global.news, container_x, {
    spacing: $ui.size;
    padding: [$ui.size*2, 0];

    widget(icon, {
      source: "dataroot://resources/svg/Alert.svg";
      shadow: true;
      sizeScale: 1;
    });

    widget(label, {
      caption: $self.message;
      outline: true;
      shadow: true;
    });

    space(1);

    widget(backdrop, {
      onEvent(activate, navOpen($self.location));
      focusable: 0.1;
      alpha: isFocused() + 0.5;
      source: "skin://graphics/border-tiny.png";
      border: 4;
      margin: [0,-3];
      padding: [10, -1];
      widget(label, {
	outline: true;
	shadow: true;
	caption: $self.caption;
      });
    });

    widget(backdrop, {
      onEvent(activate, deliverEvent($self.eventSink, "dismiss"));
      focusable: 0.1;
      alpha: isFocused() + 0.5;
      source: "skin://graphics/border-tiny.png";
      border: 4;
      margin: [0,-3];
      padding: [10, -1];
      widget(label, {
	outline: true;
	shadow: true;
	caption: _("Dismiss");
      });
    });
  });

  widget(dummy, {
    height: $ui.size / 2;
  });


    // Search

    widget(container_x, {
      spacing: $ui.size;
      padding: [$ui.size, 0];
      widget(icon, {
	source: "dataroot://resources/svg/Search.svg";
	shadow: true;
	sizeScale: 2;
	color: [0.431, 0.811, 1];
      });

      widget(container_y, {
	.align = center;
	widget(backdrop, {
	  height: $ui.size * 2;
	  filterConstraintX: true;
	  color: [0.431, 0.811, 1] * 0.5 + 0.5 * iir($view.searchFocused, 10);
	  source: "skin://graphics/shadedplate.png";
	  border:  4;
	  padding: [0, -2, -2, -2];
	  
          widget(backdrop, {
            filterConstraintX: true;
	    color: 0;
            source: "skin://graphics/shadedplate.png";
	    border: 4;
            padding: [0, -2];

	    widget(container_z, {
	      widget(text, {
		focusable: 0.1;
		$view.searchFocused = isFocused();
		bind($view.searchQuery);
		sizeScale: 1.5;
		onEvent(enter, navOpen("search:" + $view.searchQuery),
			$view.searchQuery);
		onEvent(submit, navOpen("search:" + $view.searchQuery),
			$view.searchQuery);
		description: _("Search / Open URL");
              });
/*
	      widget(label, {
		color: [0.431, 0.811, 1] * 0.5;
		alpha: iir(!($view.searchFocused || $view.searchQuery), 10);
		caption: "Type here to search or to open URL";
		align: center;
	      });
*/
	    });
	  });
	});
      });
      widget(icon, {
      });

    });

  widget(dummy, {
    height: $ui.size / 2;
  });
  VerticalSeparator();
  widget(dummy, {
    height: $ui.size;
  });


widget(array, {
  alphaFallOff: 0.1;
  blurFallOff: 0.1;

  Yspacing: $ui.size / 2;
  Xspacing: $ui.size / 2;

  childTilesX: 7;

  cloner($global.services.stable, container_z, {
    HOMEITEM($self.title,
	     $self.icon ?? 
	     "dataroot://resources/svg/" + 
	     translate($self.type, "Folder",
		       "music",    "Music",
		       "video",    "Movie",
		       "tv",       "Display",
		       "usb",      "Usb",
		       "dvd",      "Disc",
		       "cd",       "Disc",
		       "bluray",   "Disc",
		       "network",  "Home",
		       "setting",  "Settings",
		       "plugin",   "Plugin",
		       "photos",   "Pictures") + ".svg",
	     navOpen($self.url), $self.badge);
  });
});
});
