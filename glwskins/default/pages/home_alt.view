#import "skin://common.view"

$view.sizer = $ui.size / 3;

#define HOMEITEM(CAPTION, ICON, ACTION, BADGE, WEIGHT=1) {
  widget(container_x, {
    spacing: $ui.size;
    focusable: WEIGHT;
    onEvent(activate, ACTION);
    
    widget(displacement, {

      padding: $view.sizer * -1.5 * iir(isHovered() || isFocused(), 3) + $view.sizer * iir(isPressed(), 3);

      widget(container_z, {
      
	widget(backdrop, {

	  color: iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
	  SquareButtonBack();
	  
	  widget(frontdrop, {
	    SquareButtonFront();
	  
	    widget(icon, {
	      color: iir(0.6 + (isFocused() || isPressed() || isHovered()), 4);
	      source: ICON;
	      
	      shadow: true;
	      sizeScale: 3;
	    });
	  });
	});
	widget(container_x, {
	  alpha: iir(select(BADGE, 1, 0), 8);
	  space(1);
	  widget(container_y, {
	    space(1);
	    widget(backdrop, {
	      source: "skin://graphics/badge.png";
	      border: 16;
	      padding: [-4, -12];
	      widget(label, {
		outline: true;
		shadow: true;
		caption: BADGE;
		size: 24;
	      });
	    });
	  });
	});
      });
    });
    
    widget(label, {
      caption: CAPTION;
      outline: true;
      shadow: true;
      sizeScale: 1.5;
      color: iir(0.5 + (isFocused() || isPressed() || isHovered()), 4);
      ellipsize: true;
    });
  });
}

#define YLIST_PROPS() {
  padding: [0,$ui.size * 3];
  alphaFallOff: 1;
  blurFallOff: 0.3;
  spacing: $ui.size;

}

#define XITEM_PROPS() {
  width: $ui.width / 3;
  $clone.f = isFocused();
  filterConstraintY: true;
}

#define XITEM_TITLE(CAPTION) {
  widget(label, {
    caption: CAPTION;
    outline: true;
    shadow: true;
    sizeScale: 2;
    alpha: iir(0.2 + $clone.f, 4);
    align: topLeft;
  });

}

widget(container_y, {
  alpha: 1 - iir(clamp(getLayer(), 0, 1), 7) * 0.5;
  blur:      iir(clamp(getLayer(), 0, 1), 7);

  widget(container_z, {
    widget(text, {
      bind($view.searchQuery);
      sizeScale: 2;
      focusable: 0.7;
      $view.searchAlpha = 0.3 + iir(isFocused() * 0.7, 8) + isHovered() * 0.1;

      onEvent(enter, navOpen("search:" + $view.searchQuery));
    });
  });
  VerticalSeparator();

widget(container_z, {

  widget(list_x, {
    padding: [$ui.width / 6, 0];
    scrollThreshold: $ui.width / 6;
    alphaFallOff: 1.5;
    blurFallOff: 0.7;

    widget(container_z, {
      XITEM_PROPS();

      widget(list_y, {
	YLIST_PROPS();
	
	HOMEITEM("Settings", "dataroot://resources/svg/Settings.svg",
		 navOpen("settings:"), false, 0.5);
	HOMEITEM("Plugins", "dataroot://resources/svg/Plugin.svg",
		 navOpen("plugin:start"), 
		 $global.plugins.status.upgradeable, 0.5);
	HOMEITEM("Showtime", "dataroot://resources/showtime/showtime.png",
		 navOpen("page:about"), false, 0.5);
      });
      
      XITEM_TITLE("System");
    });

    cloner(propSorter(propGrouper($global.services.enabled, "node.type"),
		      sort, "node.name", false, false), container_z, {
      XITEM_PROPS();

      widget(list_y, {
	YLIST_PROPS();
	cloner(propSorter($self.nodes,
			  sort, "node.title", false, false), container_z, {
	  HOMEITEM($self.title,
		   $self.icon ?? 
		   "dataroot://resources/svg/" + 
		   translate($self.type, "Folder",
			     "music",    "Music",
			     "video",    "Movie",
			     "tv",       "Display",
			     "usb",      "Usb",
			     "dvd",      "Disc",
			     "cd",       "Disc",
			     "bluray",   "Disc",
			     "photos",   "Pictures") + ".svg",
		   navOpen($self.url), $self.badge);
	});
      });
      XITEM_TITLE($self.name);
    });
  });

  widget(container_y, {
    padding: [0, $ui.size * 2];
    VerticalSeparator();
  });
});


});
