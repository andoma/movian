setDefaultFont($core.fonts.main);
$ui.monofont = "dataroot://res/fonts/Vazir.ttf";
$ui.condensedfont = $core.fonts.condensed ?? 
  "skin://fonts/OpenSans-CondBold.ttf";
$ui.background = "skin://graphics/background.jpg";

onEvent(logwindow, {
  $ui.logwindow = !$ui.logwindow;
});

onEvent(back, {
  $ui.logwindow = false;
}, $ui.logwindow);


onEvent(sysinfo, {
  $ui.sysinfo = !$ui.sysinfo;
});


widget(container_z, {

  widget(loader, {
    source: selectedElement(vectorize($core.glw.views.standard.background))
      ?? "background.view";
    effect: blend;
    time: 0.3;
  });

  widget(loader, {
    time: 0.3;
    effect: blend;
    source: select($ui.screensaverActive,
		   selectedElement(vectorize($core.glw.views.standard.screensaver)) ?? "skin://screensaver.view", "");
  });

  widget(loader, {
    alpha: iir($nav.currentpage.model.loading, 8);
    source: selectedElement(vectorize($core.glw.views.standard.loading))
      ?? "loading.view";
  });

  widget(underscan, {
    widget(container_z, {
      widget(layer, {
	alpha: iir(1 - $ui.screensaverActive, 8);

	widget(playfield, {
	  effect: blend;
	  noInitialTransform: true;
    
	  cloner($nav.pages, layer, {

	    $clone.pageMenu = 0;
	    // Page menu event routing
	    onEvent(menu,   { $clone.pageMenu = !$clone.pageMenu; }, !$clone.itemMenu);
	    onEvent(back,   { $clone.pageMenu = false; }, $clone.pageMenu);
	    onEvent(cancel, { $clone.pageMenu = false; }, $clone.pageMenu);

	    widget(loader, {
	      time: 0.2;
	      noInitialTransform: true;
	      source: "pages/" + $self.model.type + ".view";
	    });

	    widget(loader, {
	      hidden: !$clone.pageMenu;
	      noInitialTransform: true;
	      source: select($clone.pageMenu,
			     $clone.menu ?? "skin://cmdmenu/cmdmenu_dir.view",
			     "");
	    });
	  });
	});

	cloner($core.popups, loader, {
	  source: "popups/" + $self.type + ".view";
	});

	widget(loader, {
          hidden: !$ui.logwindow;
	  source: select($ui.logwindow, "log.view", "");
	});

	widget(loader, {
	  hidden: !$ui.osk.show;
	  source: select($ui.osk.show, "osk.view", "");
	});
      });

      // Now playing info
      widget(container_y, {
	align: bottom;
	widget(expander_y, {

	  $ui.playdeckheight = getHeight();
	  expansion: scurve($ui.showplaydeck && $core.media.current.type, 0.1);
	  widget(loader, {
	    time: 0;
	    effect: blend;
	    noInitialTransform: true;
	    source: "skin://playdecks/" + $core.media.current.type + ".view";
	  });
	});
      });
    });
  });


  // Overlay that always should be visible even if screen saver is active

  widget(container_y, {
    autofade: true;
    expediteSubscriptions: true;
    padding: 50;
    align: top;
    cloner($core.notifications.nodes, container_x, {
      widget(backdrop, {
	filterConstraintX: true;
	source: "skin://graphics/blackdrop16.png";
	border: 7;
	alphaSelf: 0.9;

	widget(container_x, {
	  spacing: 10;
	  widget(icon, {
	    align: topLeft;
	    sizeScale: 1.5;
	    source: "dataroot://res/svg/Alert.svg";
	    color: translate($self.type, [1,1,1],
			     "info", [0.5, 1, 0.5],
			     "warning",  [1, 1, 0.5],
			     "error", [1, 0.5, 0.5]);
	  });

	  widget(label, {
	    caption: $self.text;
	    shadow: true;
	    sizeScale: 1.5;
	    maxlines: 4;
	    color: translate($self.type, [1,1,1],
			     "info", [0.5, 1, 0.5],
			     "warning",  [1, 1, 0.5],
			     "error", [1, 0.5, 0.5]);
	  });
	});
      });
    });
  });


  widget(container_x, {
    space(1);
    widget(container_y, {
      filterConstraintX: true;
      align: center;
      widget(label, {
	alpha: iir(changed($core.audio.mastervolume, 2, true), 7);
	caption: fmt(_("Master volume: %d dB"), $core.audio.mastervolume);
	align: center;
	outline: true;
	shadow: true;
	sizeScale: 2;
      });
      

      widget(label, {
	alpha: iir($core.audio.mastermute, 7);
	caption: _("Audio muted");
	align: center;
	outline: true;
	shadow: true;
	sizeScale: 2;
      });
    });
    space(1);
  });

  widget(underscan, {
#import "sysinfo.view"
  });
});
